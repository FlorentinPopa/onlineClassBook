{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let StudentsService = /*#__PURE__*/(() => {\n  class StudentsService {\n    constructor(http) {\n      this.http = http;\n      this.apiURL = \"http://sdaproject.tk/\";\n      this.httpHeaders = {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/JSON\"\n        })\n      };\n    }\n\n    getStudents() {\n      return this.http.get(this.apiURL + \"elevi\");\n    }\n\n    getStudent(studentID) {\n      return this.http.get(this.apiURL + \"elevi/\" + studentID);\n    }\n\n    addStudent(student) {\n      return this.http.post(this.apiURL + \"elevi\", JSON.stringify(student), this.httpHeaders);\n    }\n\n    editStudent(studentID, studentDetails) {\n      return this.http.put(this.apiURL + \"elevi/\" + studentID, JSON.stringify(studentDetails), this.httpHeaders).pipe(retry(1), catchError(this.handleError));\n    }\n\n    removeStudent(studentID) {\n      return this.http.delete(this.apiURL + \"elevi/\" + studentID);\n    } // Error handling\n\n\n    handleError(error) {\n      let errorMessage = \"\";\n\n      if (error.error instanceof ErrorEvent) {\n        // Get client-side error\n        errorMessage = error.error.message;\n      } else {\n        // Get server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  StudentsService.ɵfac = function StudentsService_Factory(t) {\n    return new (t || StudentsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  StudentsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StudentsService,\n    factory: StudentsService.ɵfac,\n    providedIn: \"root\"\n  });\n  return StudentsService;\n})();","map":null,"metadata":{},"sourceType":"module"}